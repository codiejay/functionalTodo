{"version":3,"sources":["firebase.js","IndividualTask/IndividualTask.js","TaskLists/TaskLists.js","UserBar/UserBar.js","UserInput/UserInput.js","TaskHead/TaskHead.js","Container/Container.js","Pages/Home.js","Pages/Login.js","Pages/SignUp.js","App.js","serviceWorker.js","index.js"],"names":["require","config","console","log","process","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","IndividualTask","props","id","containerId","data-type","uniqueID","taskName","onClick","delBttnClicked","checkBttnId","checkBttnClicked","TaskLists","user","auth","currentUser","handledelBttnClicked","username","e","parentNode","target","setAttribute","addEventListener","targetUID","parseInt","dataset","type","db","firestore","collection","uid","where","get","then","data","docArr","docs","forEach","item","push","doc","delete","delData","handlecheckBttnClicked","d","docId","i","update","storedTasks","map","key","uniqueId","taskname","done","currentTasks","userinput","UserBar","className","signoutUser","UserInput","onSubmit","taskformSubmitted","placeholder","onChange","userInputChange","value","inputValue","TaskHead","useEffect","Firebase","onAuthStateChanged","setTaskHead","taskhead","useState","autofocus","Container","userFullName","realUserName","userId","newArr","orderBy","setstoredtasks","storedtasks","concat","tasks","setTasks","setUserInput","setuniqueId","event","preventDefault","Date","getTime","add","Home","usersignedIn","to","Login","timeErrorAppear","userpassword","userdetails","setuserdetails","cancelError","clearInterval","setshowloginError","showloginError","userDeatilsChange","targetElem","name","errorMessage","seterrorMessage","signInWithEmailAndPassword","getUserId","setUsername","loginUser","catch","error","message","split","setInterval","style","transition","SignUp","timeError","cancelErrorMessage","seterrorOccured","errorOccured","userDetailsUpdated","targetName","setuserInput","userInput","userfullname","userEmail","userPassword","setErrorMessage","createUserWithEmailAndPassword","set","fullname","useremail","useruid","userfirstName","signUserIn","setUserId","display","App","userSignedInState","setuserSignedInState","userfirstname","setuserfirstname","exact","path","signOut","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba2239f7.chunk.js","sourcesContent":["import firebase from 'firebase';\nrequire('dotenv').config();\n\nconsole.log(process.env);\n// Your web app's Firebase configuration\nlet firebaseConfig = {\n  apiKey: \"AIzaSyBR1YAltuzJJP9Czuqo3c5Os1w8NFxJIEY\",\n  authDomain: \"reactfirestore-79c3c.firebaseapp.com\",\n  databaseURL: \"https://reactfirestore-79c3c.firebaseio.com\",\n  projectId: \"reactfirestore-79c3c\",\n  storageBucket: \"reactfirestore-79c3c.appspot.com\",\n  messagingSenderId: \"596408967886\",\n  appId: \"1:596408967886:web:39620bfceac788ee7ae69f\",\n  measurementId: \"G-6N7YLRY6QT\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n","import React, { useState } from 'react';\nimport './IndividualTask.css';\n\nconst IndividualTask = (props) => { \n  return (\n      <div \n        id={props.containerId}\n        data-type= {props.uniqueID}\n      >\n        <li >{props.taskName}</li>\n        <span \n          id=\"delBttn\"\n          onClick={props.delBttnClicked}\n        >\n        </span>\n        <span \n          id={props.checkBttnId}\n          onClick={props.checkBttnClicked}\n        >\n        </span>\n      </div>\n  )\n};\n\nexport default IndividualTask;","import React, { useState } from 'react';\nimport './TaskLists.scss';\nimport firebase from 'firebase';\n//Externam Components\nimport IndividualTask from '../IndividualTask/IndividualTask';\n\nconst TaskLists = (props) => { \n  let user = firebase.auth().currentUser\n  let userFullName = props.username;\n  const delData = (target) => { \n    let targetUID = parseInt(target.dataset.type);\n    // get the data's ID from firebase\n    let db = firebase.firestore();\n    db.collection(user.uid)\n      .where('uniqueId', '==', targetUID)\n      .get()\n      .then(data => {\n        let docArr = [];\n        data.docs.forEach(item => { \n          docArr.push(item.id);\n        })\n        db.collection(user.uid)\n        .doc(docArr[0])\n        .delete()\n      })\n  }\n  const handledelBttnClicked = (e) => {\n    let parentNode =  e.target.parentNode\n    parentNode.setAttribute(\n      'style', \n      'animation: fadeAway 0.5s 1'\n    );\n\n    parentNode.addEventListener('animationend', (e) => { \n      e.target.setAttribute('style', 'display: none')\n    })\n\n    delData(e.target.parentNode)\n  }\n\n  const handlecheckBttnClicked = (e) => { \n    let parentNode = e.target.parentNode;\n    if(e.target.id === 'regularDoneBttn') { \n      e.target.setAttribute('id', 'undoBttn');\n      parentNode.setAttribute('id', 'individualTaskBlur')\n      firebase.firestore()\n      .collection(user.uid)\n      .where('uniqueId', '==', parseInt(e.target.parentNode.dataset.type))\n      .get()\n      .then(d => { \n        let docId = ' '\n        d.forEach(i => { \n          docId = i.id\n        })\n        firebase.firestore()\n        .collection(user.uid)\n        .doc(docId)\n        .update({ \n          'done': true,\n        })\n      })\n    }\n    else { \n      e.target.setAttribute('id', 'regularDoneBttn');\n      parentNode.setAttribute('id', 'individualTask')\n      firebase.firestore()\n      .collection(user.uid)\n      .where('uniqueId', '==', parseInt(e.target.parentNode.dataset.type))\n      .get()\n      .then(d => { \n        let docId = ' '\n        d.forEach(i => { \n          docId = i.id\n        })\n        firebase.firestore()\n        .collection(user.uid)\n        .doc(docId)\n        .update({ \n          'done': false,\n        })\n      })\n    }\n  };\n\n  return (\n    <div id='taskList'>\n      {\n        props.storedTasks.map((item, key) => {\n          return ( \n            <IndividualTask \n              key={key}\n              uniqueID={item.uniqueId}\n              taskName={item.taskname} \n              delBttnClicked={handledelBttnClicked}\n              checkBttnClicked={handlecheckBttnClicked}\n              checkBttnId={(item.done ? 'undoBttn' : 'regularDoneBttn' )}\n              containerId={(item.done) ? 'individualTaskBlur' : 'individualTask'}\n            />\n          )\n        })\n      }\n      { \n        props.currentTasks.map((item, key) => { \n          return ( \n            <IndividualTask \n              key={key}\n              uniqueID={item.uniqueId}\n              taskName={item.userinput} \n              delBttnClicked={handledelBttnClicked}\n              checkBttnClicked={handlecheckBttnClicked}\n              checkBttnId={'regularDoneBttn'}\n              containerId={'individualTask'}\n            />\n          )\n        })\n      }\n    </div>\n  )\n}\n\nexport default TaskLists;","import React, { useState } from 'react';\nimport './UserBar.scss'\n\nconst UserBar = (props) => { \n\n  return ( \n    <div className=\"userBar\">\n      <h1>{props.username}</h1>\n      <div className=\"userSign\">\n        <button onClick={props.signoutUser}>Sign Out</button>\n      </div>\n    </div>\n  )\n}\n\nexport default UserBar;","import React, { useState } from 'react';\nimport './UserInput.scss';\n\nconst UserInput = (props) => { \n  return (\n    <form id='userInput' onSubmit={props.taskformSubmitted}>\n      <input \n        placeholder='TYPE HERE TO ADD NEW TASK' \n        onChange={props.userInputChange} \n        value={props.inputValue}\n      />\n      <button \n        id='addTaskBttn' \n      >\n        Add Task\n      </button>\n    </form>\n  ) \n}\n\nexport default UserInput;","import React, { useState, useEffect } from 'react';\nimport Firebase from 'firebase';\nimport './TaskHead.scss';\n\nconst TaskHead = (props) => {\n\n  useEffect(() => { \n    Firebase.auth()\n      .onAuthStateChanged((user) => { \n        if(user) { \n          Firebase.firestore()\n          .collection(user.uid)\n          .doc('credentials')\n          .get()\n          .then(data => { \n            console.log(data.data());\n            setTaskHead(data.data().taskhead)\n          });\n        }\n      })\n  },[])\n  const taskHeadChange = (e) => { \n    setTaskHead(e.target.value);\n    Firebase.firestore()\n      .collection(props.uid)\n      .doc('credentials')\n      .update({ \n        taskhead: e.target.value\n      })\n  }\n\n  let [taskhead, setTaskHead] = useState('');\n  return ( \n      <div id='taskhead'> \n          <input \n            type='text'\n            value={taskhead}\n            onChange={taskHeadChange}\n            autofocus\n          />\n      </div>\n  )\n} \n\nexport default TaskHead;","import React, { useState, useEffect } from \"react\";\nimport firebase from 'firebase';\n\n//Components\nimport TaskLists from '../TaskLists/TaskLists';\nimport UserBar from '../UserBar/UserBar';\nimport UserInput from '../UserInput/UserInput';\nimport TaskHead from '../TaskHead/TaskHead';\n\n//Component being start building here\nconst Container = (props) => {\n  let user = firebase.auth().currentUser;\n  //FIREBASE USERDATA: \n  let userFullName = props.realUserName;\n  let userId = props.userId;\n\n    const Getdata = () => { \n      let db = firebase.firestore();\n      return db.collection(user.uid)\n        .orderBy('taskname')\n        .get()\n  }\n\n  //Push in data from firestore database here- \n  // this runs just once;\n  useEffect(() => { \n    let newArr = [];\n    Getdata()\n      .then(data => {\n        data.forEach(doc => {\n          newArr.push(doc.data());\n        });\n        setstoredtasks(storedtasks.concat(newArr))\n      })\n  }, [])\n\n  //useStates\n  const [tasks, setTasks] = useState([]);\n  let [userinput, setUserInput] = useState('');\n  let [storedtasks, setstoredtasks] = useState([]);\n  let [uniqueId, setuniqueId] = useState([]);\n  //userInput  Handler\n  const handleuserInputChange = (event) => { \n    setUserInput(userinput = event.target.value);\n  }\n\n  //form submit Handler.\n  const handleformSubmit = (e) => { \n    e.preventDefault();\n    if(userinput) { \n      setuniqueId( uniqueId = new Date().getTime() );\n      let db = firebase.firestore();\n      db.collection(`${userId}`)\n        .add({\n          taskname: userinput,\n          uniqueId: uniqueId,\n          done: false,\n        });\n      setTasks(tasks.concat({userinput: userinput, uniqueId:uniqueId}));\n      setUserInput('');\n    }\n  }\n  return (\n    <div id='container'>\n      <UserBar \n        username={userFullName}\n        signoutUser={props.signoutUser}\n      />\n      <TaskHead \n        uid = {userId}\n      />\n      <TaskLists \n        storedTasks={storedtasks} \n        currentTasks={tasks}\n        username={userFullName}\n      />\n      <UserInput \n        userInputChange={handleuserInputChange}\n        taskformSubmitted={handleformSubmit}\n        inputValue={userinput}\n      />\n    </div>\n  )\n}\n\nexport default Container;","import React, { useState } from 'react';\nimport Container from '../Container/Container';\nimport { Redirect } from 'react-router-dom';\n\nconst Home = (props) => {\n  return ( \n    (props.usersignedIn) ? \n    <Container \n      realUserName={props.username}\n      userId={props.userId}\n      signoutUser={props.signoutUser}\n    /> \n    : \n    <Redirect to='/signup' />\n  ) \n}\n\nexport default Home;","import React, { useState } from 'react';\nimport firebase from 'firebase';\nimport { \n  Link,\n  Redirect\n} from 'react-router-dom';\nimport './Login.scss'\n\nconst Login = (props) => { \n\n  let timeErrorAppear;\n  let [userdetails, setuserdetails] = useState({ \n    username: '',\n    userpassword: '',\n  });\n\n  let userHasSignedIn = (data) => { \n    props.getUserId(data.user.uid);\n    firebase.firestore()\n      .collection(data.user.uid)\n      .doc('credentials')\n      .get()\n      .then( \n        (docs) => { \n          props.setUsername(docs.data().username);\n        }\n      );\n      props.loginUser();\n  };  \n\n  let formSubmitted = (event) => { \n    event.preventDefault();\n\n    if(userdetails.username, userdetails.userpassword) { \n      firebase.auth()\n        .signInWithEmailAndPassword(userdetails.username, userdetails.userpassword)\n          .then( \n            docs => { \n              userHasSignedIn(docs)\n            }\n          )\n          .catch(error => { \n            seterrorMessage(errorMessage = error.message.split('.')[0]);\n            setshowloginError(showloginError = 'errorBoxShow');\n            timeErrorAppear = setInterval(() => {\n              cancelError();\n            }, 2000);\n          })\n    }\n  };\n\n  let cancelError = () => { \n    clearInterval(timeErrorAppear);\n    setshowloginError(showloginError = 'errorBoxHide');\n  }\n\n  let userDeatilsChange = (e) => { \n    let targetElem = e.target.value;\n    let targetName = e.target.name;\n\n    switch(targetName) { \n      case 'username': \n        setuserdetails({...userdetails, username: targetElem})\n        break;\n      case 'password': \n        setuserdetails({...userdetails, userpassword: targetElem})\n    }\n  } \n\n  let [showloginError, setshowloginError] = useState('errorBoxHide');\n  let [errorMessage, seterrorMessage] = useState('');\n  return ( \n    (props.usersignedIn) ? <Redirect to='/' /> :\n    <div className=\"loginContainer\">\n      <form id='loginForm' onSubmit={formSubmitted}> \n        <h1 className=\"heading\">you're logging in</h1>\n        <input \n          type=\"text\" \n          placeholder='Your Email'\n          onChange={userDeatilsChange}\n          name='username'\n        />\n        <input \n          type=\"password\" \n          placeholder='Your Password'\n          onChange={userDeatilsChange}\n          name='password'\n        />\n\n        <button>Login</button>\n        <p id='loginPromptMobile'>\n          Don't have an account yet? \n          <Link to='./signup'> Sign Up here</Link> \n        </p>\n        <div className={showloginError} style={{transition: 'all 0.3s'}}>\n          <p>{errorMessage}.</p>\n        </div>\n      </form>\n      <div className=\"signupBox\">\n        <h1>Don't own an account? </h1>\n        <Link to='/signup'>Sign Up</Link>\n      </div>\n    </div>\n  )\n}\n\nexport default Login;","import React, { useState } from 'react';\nimport firebase from 'firebase';\nimport { \n  Link, Redirect\n} from 'react-router-dom';\nimport './SignUp.scss';\n\n\nconst SignUp = (props) => { \n\n  let timeError;\n\n  // Add user to firebase database\n  const addUser = (id) => { \n    firebase.firestore()\n      .collection(id)\n      .doc('credentials')\n      .set({ \n        fullname: userInput.userfullname,\n        useremail: userInput.userEmail,\n        useruid: id,\n        taskhead: `Your List's Name`,\n      })\n    props.setUsername(userInput.userfirstName);\n    props.signUserIn();\n    props.setUserId(id)\n  }\n  //User submits form\n  const formSubmitted = (e) => { \n    e.preventDefault();\n    \n    if(\n      userInput.userfullname,\n      userInput.userPassword\n    ) { \n      firebase.auth()\n        .createUserWithEmailAndPassword(userInput.userEmail, userInput.userPassword)\n        .then((d) => { \n          addUser(d.user.uid)\n        })\n        .catch(error => { \n          setErrorMessage(errorMessage = error.message);\n          seterrorOccured(errorOccured = 'errorMessageShow');\n          timeError = setInterval(() => {\n            cancelErrorMessage()\n          }, 3000);\n        })\n    }\n  }\n\n  const cancelErrorMessage = () => { \n    seterrorOccured(errorOccured  = 'errorMessageHide');\n    clearInterval(timeError)\n  }\n\n  const userDetailsUpdated = (event) => { \n    let targetName = event.target.name;\n    let target = event.target.value;\n    switch(targetName) { \n      case 'userfullname': \n        setuserInput({...userInput, userfullname: target });\n        break;\n      case 'useremail': \n        setuserInput({...userInput, userEmail: target });\n        break;\n      case 'userpassword': \n        setuserInput({...userInput, userPassword: target });\n    }\n  } \n\n  let [userInput, setuserInput] = useState({\n    userfullname: '',\n    userEmail: '',\n    userPassword: ''\n  });\n  let [errorOccured, seterrorOccured] = useState('errorMessageHide');\n  let [errorMessage, setErrorMessage] = useState('');\n  return ( \n    (props.usersignedIn) ? <Redirect to='/' /> :\n    <div className=\"signupcontainer\">\n      <form id='signForm' onSubmit={formSubmitted}>\n          <h1 className=\"heading\">you're about <br></br> to  SIGN-UP</h1>\n          <input \n            onChange={userDetailsUpdated}\n            type=\"text\" \n            placeholder='Your Email'\n            name='useremail'\n          />\n          <input \n            onChange={userDetailsUpdated}\n            type=\"text\" \n            placeholder='Your Full Name'\n            name='userfullname'\n          />\n          <input \n            onChange={userDetailsUpdated}\n            type=\"password\" \n            placeholder='Your Password'\n            name='userpassword'\n          />\n          <button>Sign-Up</button>\n          <p id='loginPromptMobile'>\n            Own an account already?\n            <Link to='./login'> Login here</Link> \n          </p>\n          <div \n            className={errorOccured} \n            style={{\n              display: 'block', \n              transition: 'all 2s',\n            }}\n          >\n            <p>{errorMessage}</p>\n          </div>\n      </form>\n      <div id='loginBox'>\n        <h1>own an account already?</h1>\n        <Link to='/login'>Login</Link>\n      </div>\n    </div>\n  )\n}\n\nexport default SignUp;","import React, { useState } from 'react';\nimport './App.scss';\nimport Firebase from './firebase';\nimport firebase from 'firebase';\nimport { \n  BrowserRouter, \n  Route,\n} from 'react-router-dom'\n\n//Components\nimport Home from '../src/Pages/Home';\nimport Login from '../src/Pages/Login';\nimport Signup from '../src/Pages/SignUp';\n\n\nconst App = () => {\n  let [userSignedInState, setuserSignedInState] = useState(false);\n  let [userfirstname, setuserfirstname] = useState('');\n  let [userId, setUserId] = useState('');\n\n  const setUsername = (name) => { \n    setuserfirstname(userfirstname = name)\n  }\n\n  const signUserIn = () => { \n    setuserSignedInState(userSignedInState = true);\n  }\n\n  const getUserId = (id) => { \n    setUserId(userId = id);\n  }\n\n  firebase.auth().onAuthStateChanged((user) => { \n    if(user) { \n      setuserSignedInState(userSignedInState = true);\n      setUserId(userId = user.uid);\n      firebase.firestore()\n      .collection(user.uid)\n      .doc('credentials')\n      .get()\n      .then(d => {\n        setuserfirstname(userfirstname = d.data().fullname[0])\n      });\n    }\n  });\n\n  const signoutUser = () => { \n    firebase.auth().signOut().then(() => { \n      setuserSignedInState(userSignedInState = false);\n      \n    })\n  }\n\n  return (\n    <BrowserRouter>\n      <Route exact path='/'> \n         <div className='App'>\n            <Home \n              usersignedIn= {userSignedInState}\n              username={userfirstname}\n              userId={userId}\n              signoutUser={signoutUser}\n            />\n         </div>\n      </Route>\n      <Route path='/login'>\n        <Login \n          usersignedIn= {userSignedInState}\n          loginUser={signUserIn}\n          getUserId={getUserId}\n          setUsername={setUsername}\n        />\n      </Route>\n      <Route path='/signup'>\n        <Signup \n          usersignedIn= {userSignedInState}\n          setUsername={setUsername}\n          signUserIn={signUserIn}\n          setUserId={getUserId}\n        />\n      </Route>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}